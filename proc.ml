open Graphics;;
#load "graphics.cma";;
#load "unix.cma" ;;

(** globals & types **)

let width = 480 and height = 480 ;;
let fps = 1. ;;
let hist = ref [] ;;

type interval = int  ;;
type histogram = interval list;;
type image = color array array ;;

let ti =  int_of_float and tf = float_of_int ;;
let prim : image = [| 
[|146;146;146;109;109;146;146;146;182;219;182;219;255;255;255;255;255;255;255;255;255;255;255;255;255;255;255;255;219;219;219;255;255;255;255;255;255;255;255;255;219;219;219;255;255;255;255;219|];
[|146;146;109;109;109;146;146;146;182;219;219;255;255;255;255;255;255;255;219;255;255;255;255;255;255;255;255;255;255;219;219;255;255;255;255;255;255;255;255;219;219;219;219;219;219;255;219;219|];
[|146;146;109;109;109;146;146;146;182;219;219;219;255;255;255;255;255;219;219;255;255;255;255;255;255;255;255;255;219;219;219;219;219;219;255;255;255;255;219;219;219;219;219;219;219;219;219;182|];
[|146;146;109;109;109;146;146;182;219;182;219;219;255;255;255;255;255;219;219;255;255;255;255;255;255;255;255;219;219;219;219;219;219;219;219;219;219;219;219;219;182;182;182;182;182;182;182;182|];
[|146;146;109;109;146;146;146;182;182;219;219;255;255;219;219;255;255;255;219;219;255;255;255;255;255;255;219;219;219;219;219;219;219;219;219;219;219;219;219;182;146;146;182;182;182;182;146;146|];
[|146;146;146;109;146;146;146;182;182;219;219;219;182;73;36;109;182;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;182;182;109;109;146;146;146;146;146;146|];
[|146;146;146;146;146;146;146;182;182;182;219;255;73;36;109;73;36;146;219;219;146;182;219;182;219;219;219;219;219;219;219;219;219;219;219;219;219;219;219;182;146;109;146;146;146;146;146;146|];
[|146;146;146;146;146;146;146;182;182;219;219;255;109;36;109;146;109;73;146;219;73;146;219;182;219;219;219;219;219;219;255;255;255;255;219;219;219;219;219;182;146;109;146;182;182;182;146;146|];
[|146;146;146;146;146;146;146;146;182;219;219;255;182;73;109;109;182;146;73;146;146;109;219;219;219;255;255;255;255;255;255;255;255;255;255;219;219;255;219;219;146;109;146;182;182;182;182;146|];
[|146;146;146;146;146;146;146;146;182;219;219;255;255;109;109;109;109;182;146;146;182;109;182;219;219;255;219;219;255;255;255;255;255;255;255;219;219;219;219;219;146;109;146;182;182;182;146;146|];
[|146;109;109;146;146;146;146;182;219;219;219;255;255;146;109;109;109;182;182;146;182;146;146;219;219;255;255;255;219;255;255;255;255;219;255;219;182;182;219;182;146;146;182;219;219;182;146;109|];
[|146;109;109;146;146;146;146;182;219;219;255;255;255;182;109;146;146;109;182;219;182;219;219;219;255;219;219;255;255;255;255;219;219;219;219;219;146;146;182;182;182;182;182;219;182;182;146;109|];
[|146;109;109;146;146;146;146;182;219;219;255;255;255;255;146;182;146;109;146;182;182;182;255;219;219;219;146;182;255;255;255;219;219;182;182;182;109;109;146;182;182;182;219;219;182;146;109;109|];
[|146;109;109;146;146;146;146;182;219;219;255;255;255;255;146;146;146;146;109;146;182;146;219;182;182;219;146;146;219;255;255;219;182;146;146;109;109;109;146;182;182;219;219;182;146;109;73;73|];
[|146;109;109;146;146;146;146;182;219;219;255;255;255;255;219;146;182;146;109;146;146;146;182;182;182;182;146;146;219;255;219;182;146;109;73;73;109;146;146;182;182;182;182;182;146;73;73;73|];
[|109;109;109;146;146;146;146;182;219;255;255;255;255;255;255;182;182;146;109;109;109;109;182;219;109;109;219;182;219;219;219;146;109;109;73;73;109;146;146;182;182;182;182;182;109;73;73;73|];
[|109;109;146;146;146;146;146;182;219;219;255;255;255;255;255;255;182;182;109;109;109;73;182;219;109;109;182;182;182;219;219;182;146;109;73;73;109;109;146;146;182;182;146;146;109;73;73;73|];
[|109;109;109;146;146;146;146;182;219;219;255;255;255;255;255;255;219;182;182;73;73;73;182;146;146;182;219;182;182;255;255;219;182;109;73;73;73;73;109;146;146;182;146;146;109;73;73;73|];
[|109;109;109;146;146;146;146;182;219;219;255;255;255;255;255;255;255;182;109;73;73;109;109;146;182;146;182;182;219;255;255;255;255;182;109;73;73;73;109;109;146;146;146;146;109;73;73;73|];
[|109;109;109;146;146;146;146;219;219;219;255;255;255;255;255;255;255;182;146;73;73;73;73;146;219;146;146;182;219;219;219;255;255;255;109;73;73;73;109;109;109;109;146;146;109;73;73;73|];
[|109;109;146;146;146;146;182;219;219;219;255;255;255;255;255;255;182;182;182;182;73;73;73;73;219;219;146;109;109;146;219;219;255;255;219;109;73;73;73;109;109;109;146;146;146;73;73;73|];
[|109;109;146;146;146;146;182;219;219;255;255;255;255;255;255;219;182;182;146;182;146;73;73;73;109;109;109;73;109;146;182;182;219;219;255;146;73;73;109;109;109;109;109;146;109;73;73;73|];
[|109;109;146;146;146;146;182;219;255;255;255;255;219;219;219;219;219;182;146;182;146;73;73;109;109;36;73;73;36;73;73;146;182;219;255;182;73;109;109;109;109;73;109;109;109;73;73;73|];
[|109;109;146;146;146;146;182;219;219;219;219;219;182;182;182;182;182;146;146;182;146;73;73;109;109;73;73;73;36;0;0;73;109;219;255;219;109;109;109;109;73;73;73;109;109;73;73;73|];
[|109;109;109;146;146;146;182;219;219;219;182;182;182;182;146;109;109;109;109;146;109;73;73;146;146;109;109;109;73;36;36;36;109;182;219;255;146;73;109;109;73;73;73;73;73;73;73;73|];
[|109;109;109;146;146;182;182;219;219;182;182;146;146;146;146;146;146;146;109;109;73;109;109;146;182;146;146;146;146;146;146;182;109;146;219;255;219;109;73;73;73;73;73;73;73;73;73;73|];
[|109;109;109;146;146;182;182;182;146;146;146;146;146;146;146;146;109;146;109;109;73;73;146;182;182;182;146;146;146;182;182;219;146;146;182;219;255;146;73;73;73;73;73;73;36;36;73;73|];
[|109;109;109;146;182;182;146;146;109;146;109;146;146;146;146;146;146;146;146;146;109;73;146;146;182;182;146;146;146;182;182;182;182;109;146;219;219;219;73;73;73;73;73;73;36;36;36;73|];
[|73;73;109;146;146;146;146;109;109;109;109;146;146;109;146;109;109;146;109;146;146;73;73;109;182;182;146;146;146;182;182;182;146;109;146;182;219;219;73;73;73;73;73;73;73;36;36;73|];
[|73;73;109;146;146;109;109;73;73;109;109;109;109;109;146;146;109;146;109;109;146;109;73;73;146;146;146;146;146;146;146;146;109;109;146;146;182;182;73;73;73;73;73;73;73;73;73;73|];
[|73;73;109;109;109;73;109;73;73;73;73;109;109;109;109;109;146;146;109;109;146;146;146;73;109;146;109;146;146;146;146;109;73;146;146;182;255;146;36;73;73;73;73;73;73;73;73;73|];
[|73;109;109;109;73;73;109;109;109;109;109;73;73;109;73;109;109;146;109;73;109;146;146;109;73;109;109;109;146;109;109;109;109;109;146;219;255;109;36;73;73;73;73;73;73;73;73;36|];
[|73;109;109;73;73;109;146;109;109;146;146;73;73;73;73;73;109;109;109;73;109;109;146;146;109;146;146;146;146;109;109;109;109;146;182;182;146;36;36;36;36;73;73;73;73;36;36;36|];
[|109;109;73;73;73;109;146;109;146;146;146;73;73;73;73;73;109;109;109;73;109;109;109;146;146;182;182;219;219;182;146;146;182;146;182;146;73;36;36;36;36;73;73;73;36;36;36;36|];
[|109;73;36;73;109;146;146;109;146;146;182;109;73;109;73;73;73;109;109;73;109;109;109;109;146;146;182;219;219;219;182;182;219;146;109;73;36;36;36;36;36;36;36;36;36;36;36;36|];
[|109;36;36;73;109;109;146;146;146;146;182;109;73;109;73;73;73;109;73;73;109;109;73;109;146;146;182;182;219;219;219;219;219;109;109;73;36;36;36;0;36;36;36;36;36;36;36;36|];
[|73;36;36;73;73;109;109;109;146;146;146;146;73;109;109;73;73;73;73;73;109;109;109;109;146;182;182;182;219;219;219;255;219;109;73;73;73;36;36;0;36;36;36;36;36;36;36;36|];
[|73;36;36;36;73;109;109;109;146;146;146;109;73;73;109;73;73;36;73;73;73;109;109;109;109;146;182;182;219;219;219;255;219;109;73;73;73;36;36;36;36;36;36;73;36;36;36;36|];
[|73;36;36;36;73;73;109;109;146;146;146;109;73;109;109;73;73;36;73;73;73;109;109;109;109;146;182;182;219;219;255;255;182;73;73;73;73;73;36;36;36;36;36;73;73;36;36;36|];
[|36;36;36;36;36;73;73;109;109;146;146;109;73;109;109;73;73;73;73;73;73;109;109;109;146;146;182;219;219;219;219;219;182;146;182;146;146;146;109;109;109;109;109;109;146;109;109;109|];
[|36;36;0;0;36;73;73;73;109;146;109;109;73;73;73;73;73;73;73;73;73;73;109;109;146;146;182;182;219;219;255;219;219;182;219;219;219;182;182;182;182;182;182;182;182;182;182;109|];
[|36;36;0;0;36;36;36;73;73;109;109;73;73;73;73;73;73;73;73;36;73;73;109;109;146;146;182;182;219;219;219;219;219;219;219;219;219;219;219;182;219;182;219;219;219;219;182;146|];
[|36;36;0;0;36;36;36;36;73;109;109;73;73;73;73;73;73;73;73;36;73;73;109;146;146;146;182;182;219;219;219;182;219;219;219;182;219;219;219;182;219;219;219;219;182;182;219;182|];
[|36;0;0;36;36;36;36;36;73;73;73;73;73;73;73;73;73;73;73;36;73;73;109;146;146;146;146;182;219;219;219;182;182;219;219;182;182;219;182;182;182;219;219;182;146;146;219;182|];
[|36;36;36;36;36;36;0;36;36;36;36;73;73;73;73;73;73;73;73;73;73;73;109;146;182;182;182;219;219;219;219;182;182;219;219;182;182;219;219;219;182;182;219;219;146;146;182;182|];
[|36;0;36;36;36;36;0;0;36;36;36;36;73;73;73;73;73;73;36;73;109;109;109;146;182;219;182;219;219;219;219;182;182;182;219;219;219;182;219;219;182;146;182;219;182;182;182;182|];
[|36;0;36;36;36;0;0;36;36;36;36;36;73;73;73;73;36;36;36;36;109;109;146;182;182;182;219;219;182;219;219;182;182;182;219;219;219;182;219;182;219;146;182;182;219;219;182;146|];
[|36;0;36;36;0;0;0;36;0;36;36;36;36;73;36;73;36;36;0;36;73;109;109;182;182;146;219;219;182;182;219;219;182;182;219;219;219;219;219;182;219;219;146;146;182;182;182;109|];
|] ;;

(** auxiliar functions **)

let deriver f x h = 
	let a = f (x + 1) and b = (f x - 1) in
	abs ((a - b) /  2 * h)  ;;
	
let to_gray n = (int_of_float (float_of_int n)) ;;	

let to_hex v = rgb v v v ;; 

let rec find_index l n =
	match l,n with
	| [] , _ -> failwith "out of index"
	| e::fin, 0 -> e
	| e::fin, v -> find_index fin (v-1) ;;

(** struct **)

module Debug = struct 

let rec display l =
match l with
| [] -> print_char '\n' ;
| e::fin -> print_int e ; print_char ' ' ; display fin ;;

let print a = print_char '\n'; print_int a ; print_char '\n' ;;

end;;


module Time = struct
let sec = Unix.time() ;;
let msec = Unix.gettimeofday() *. 1000. ;;
let wait (ms : float) : unit =
	let r = msec in
	let t = ref r and t_old = ref r in
		while !t < (!t_old +. (10000. /. ms) ) do 
			t := !t +. 0.001 ;
			done ;;
end;;



module Image = struct

let line m = (Array.length m) -1 ;;
let row  m = (Array.length m.(0)) -1 ;;

let neighbor (m: image) (p: int * int) (n: int) : int list =
	match p with 
	| (x,y) -> let l = ref [] in
	for i=0 to  (line m)  do
		for j=0 to (row m) do
			if (i >= x - n && x + n >= i)
			&& (j >= y - n && y + n >= j)
			&& (i != x || y != j) 
				then l := [( m.(i).(j) )] @ !l
		done; 
	done; !l ;;

let apply (f :'a -> 'b) (m: image) : image =
let edited = (Array.make_matrix (line m) (row m) 0) in
 	for i=1 to (line m) -1 do
		for j=1 to (row m) -1 do
		edited.(i).(j) <- max 0 (min (f m.(i).(j) i j) 255); 
		done;
	done; edited;;

let draw (m: image) (p: int * int) (s: int) =
	match p with | (x,y) ->
	for i= 0 to (line m) do
		for j= 0 to (row m) do
			set_color (to_hex m.(j).(i) );
			fill_rect (s*i) (height - (s*j)) s s;
		done;
	done;;

end;;

module Detail = struct

let brightness (m: image) =
	let s = ref 0  in
	for i = 0 to Image.line m do
		s := ( Array.fold_left (fun x acc -> x + acc) !s m.(i) )	
	done ; !s  ;;

let contrast m =
	let mx = ref 0 and mn = ref 255 in
	for i=0 to Image.line m do
		for j=0 to Image.row m do
			mx := max !mx m.(i).(j); 
			mn := min !mn m.(i).(j); 
		done;
	done ; (!mx - !mn) / (!mx + !mn) ;; 
end;;

module Histogram = struct

let from (m: image): int list =
	let h = Array.make 256 0 in
	for i=0 to Image.line m do
		for j=0 to Image.row m do
			h.(m.(i).(j)) <- h.(m.(i).(j)) + 1 ; 
		done;
	done; (Array.to_list h) ;;

let rec cumulate (h: histogram) (i: int) : histogram =

let rec aux h x =
	match x with
	| 0 -> find_index h 0
	| n -> (aux h (n-1)) + (find_index h n) in 
	if i = 0 then [] else (cumulate h (i-1)) @ [(aux h i)];;
	
let display (h: histogram) : unit =
	let rec aux h n =
	match h with
	| [] -> ()
	| e::fin -> fill_rect n 0 1 e ; aux fin (n+2) 
		in aux h 0  ;;

end;;

module Matrix = struct

let make l c v = Array.make_matrix l c v ;;

let scalar (m: 'a array array) (k: 'a) =

	for i=0 to Image.line m do
		for j=0 to Image.row m do
			m.(i).(j) <- (m.(i).(j) ) *. k;
		done;
	done;m;;

end;;

module Filter = struct

let none pixel x y = pixel ;;

let negatif pixel x y = 255 - pixel  ;;

let blur pixel x y = 
	let n = Image.neighbor prim (x,y) 1 in 
	let s = List.fold_left (fun e acc -> e + acc) 0 n 
	in s / ((List.length n) -1) ;;

let contrast pixel x y =
	let xmin = 40 and xmax = 180 in
	(pixel - xmin) * 255 / ( xmax - xmin ) ;; 

let noise pixel x y =
	Random.self_init ;
	pixel + (Random.int 100) ;; 

let egalisation pixel x y =
	(255 * (find_index !hist pixel)) / (48 * 48) ;; 

let tv pixel x y =
	pixel * ( 1 - ((x mod 2) * (4/3)) )  ;;

let border pixel x y = 
	let h = 1 in
	let r = (deriver (fun x -> prim.(x).(y) ) x h) in
	r * 255 ;;

let mask p = 
	let kernel = Matrix.make ((2*p)+1) ((2*p)+1) 0. in
	let sum =  ref 0. and sigma = (tf p) /. sqrt ( -2. *. (log 0.05)) in

	for m = -p to p do
		for n = -p to p do
		let r = exp (-.( (tf m) ** 2. +. (tf n) ** 2.) /. 2. *. (sigma ** 2.) ) in
		kernel.(m+p).(n+p) <- r ;
		sum := !sum +. r  ;
		done;
	done; Matrix.scalar kernel (1. /. !sum );;


let gaussian pixel x y =  

let p = 1 in let s = mask p and v = ref 0. in
for i= -p to p do
	for j= -p to p do
	v := !v +. (s.(p+i).(p+j)) *. (tf (prim.(x-1 + i+p).(y-1 + j+p) )) ; 
	done; 
done; (ti !v) ;;

let gamma pixel x y = 
	ti (  255. *. ( ( (tf pixel)  /. 255. ) ** 2.)  ) ;;

(*
calculer la valeur d'un pixel I(x, y) de l' image 
	
- on multiplie sa valeur par celle du
pixel central du noyau Kernel(2,2)

- additionne ensuite la valeur des produits
des pixels adjacents
*)

end;;


let setScreen = 	
	open_graph "";
	resize_window width height;
	set_window_title "Traitement d'image" ;;

let exec = 
	let e = wait_next_event [Key_pressed] 
     in true && e.Graphics.keypressed  ;;

(** main **)
let main : unit = 
	while exec do
	set_color white;
	fill_rect 0 0 width height;
	set_color black;

	let img = Image.apply Filter.gamma prim in
	Image.draw img (0,0) 8 ;
(*
	hist := Histogram.from prim ;
	hist := Histogram.cumulate !hist 255 ;
	Histogram.display !hist;
*)
	Time.wait fps;
	done;;

(** exec **)

setScreen ;;
main ;;
